# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class PaginatedResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset=None, limit=None, total=None, data=None):  # noqa: E501
        """PaginatedResult - a model defined in OpenAPI

        :param offset: The offset of this PaginatedResult.  # noqa: E501
        :type offset: int
        :param limit: The limit of this PaginatedResult.  # noqa: E501
        :type limit: int
        :param total: The total of this PaginatedResult.  # noqa: E501
        :type total: int
        :param data: The data of this PaginatedResult.  # noqa: E501
        :type data: List[object]
        """
        self.openapi_types = {
            'offset': int,
            'limit': int,
            'total': int,
            'data': List[object]
        }

        self.attribute_map = {
            'offset': 'offset',
            'limit': 'limit',
            'total': 'total',
            'data': 'data'
        }

        self._offset = offset
        self._limit = limit
        self._total = total
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'PaginatedResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PaginatedResult of this PaginatedResult.  # noqa: E501
        :rtype: PaginatedResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset(self):
        """Gets the offset of this PaginatedResult.

        Page offset  # noqa: E501

        :return: The offset of this PaginatedResult.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PaginatedResult.

        Page offset  # noqa: E501

        :param offset: The offset of this PaginatedResult.
        :type offset: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this PaginatedResult.

        Page size limit  # noqa: E501

        :return: The limit of this PaginatedResult.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PaginatedResult.

        Page size limit  # noqa: E501

        :param limit: The limit of this PaginatedResult.
        :type limit: int
        """

        self._limit = limit

    @property
    def total(self):
        """Gets the total of this PaginatedResult.

        Total number of records across all pages  # noqa: E501

        :return: The total of this PaginatedResult.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PaginatedResult.

        Total number of records across all pages  # noqa: E501

        :param total: The total of this PaginatedResult.
        :type total: int
        """

        self._total = total

    @property
    def data(self):
        """Gets the data of this PaginatedResult.


        :return: The data of this PaginatedResult.
        :rtype: List[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PaginatedResult.


        :param data: The data of this PaginatedResult.
        :type data: List[object]
        """

        self._data = data
