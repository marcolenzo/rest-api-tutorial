/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.GetAllProducts200Response;
import org.openapitools.model.Product;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-18T07:48:19.952582096+01:00[Europe/Malta]")
@Validated
@Tag(name = "Products", description = "Product management")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /products : Create a product
     * Use this endpoint to add a new product to the catalog
     *
     * @param product Product Details (optional)
     * @return Product Details (status code 200)
     *         or UnauthorizedResponse. Authentication required (status code 401)
     *         or You do not have enough rights to perform this operation (status code 403)
     *         or Client error (status code 4XX)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Create a product",
        description = "Use this endpoint to add a new product to the catalog",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product Details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            }),
            @ApiResponse(responseCode = "401", description = "UnauthorizedResponse. Authentication required", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "You do not have enough rights to perform this operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "4XX", description = "Client error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuthClientCredentials", scopes={ "products" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Product> createProduct(
        @Parameter(name = "Product", description = "Product Details") @Valid @RequestBody(required = false) Product product
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 4.99, \"name\" : \"Coffee\", \"description\" : \"Arabica coffee beans\", \"lastUpdatedOn\" : \"2023-01-01T10:10:10Z\", \"id\" : \"1001\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /products/{id} : Delete product
     * Use this endpoint to remove a product from the catalog
     *
     * @param id  (required)
     * @return Deleted (status code 204)
     *         or UnauthorizedResponse. Authentication required (status code 401)
     *         or You do not have enough rights to perform this operation (status code 403)
     *         or Resource not found (status code 404)
     *         or Client error (status code 4XX)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Delete product",
        description = "Use this endpoint to remove a product from the catalog",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "401", description = "UnauthorizedResponse. Authentication required", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "You do not have enough rights to perform this operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "4XX", description = "Client error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuthClientCredentials", scopes={ "products" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteProduct(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products : List products
     * Use this endpoint to browse all products in the catalog
     *
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 5)
     * @return Paginated array of products (status code 200)
     *         or UnauthorizedResponse. Authentication required (status code 401)
     *         or You do not have enough rights to perform this operation (status code 403)
     *         or Client error (status code 4XX)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getAllProducts",
        summary = "List products",
        description = "Use this endpoint to browse all products in the catalog",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Paginated array of products", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAllProducts200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "UnauthorizedResponse. Authentication required", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "You do not have enough rights to perform this operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "4XX", description = "Client error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuthClientCredentials", scopes={ "products" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    default ResponseEntity<GetAllProducts200Response> getAllProducts(
        @Parameter(name = "offset", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "5") Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/{id} : Get product details
     * Use this endpoint to get details about a specific product
     *
     * @param id  (required)
     * @return Product Details (status code 200)
     *         or UnauthorizedResponse. Authentication required (status code 401)
     *         or You do not have enough rights to perform this operation (status code 403)
     *         or Resource not found (status code 404)
     *         or Client error (status code 4XX)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getProduct",
        summary = "Get product details",
        description = "Use this endpoint to get details about a specific product",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product Details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            }),
            @ApiResponse(responseCode = "401", description = "UnauthorizedResponse. Authentication required", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "You do not have enough rights to perform this operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "4XX", description = "Client error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuthClientCredentials", scopes={ "products" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Product> getProduct(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 4.99, \"name\" : \"Coffee\", \"description\" : \"Arabica coffee beans\", \"lastUpdatedOn\" : \"2023-01-01T10:10:10Z\", \"id\" : \"1001\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /products/{id} : Update product&#39;s details
     * Use this endpoint to update the product&#39;s details
     *
     * @param id  (required)
     * @param product Product Details (optional)
     * @return Product Details (status code 200)
     *         or UnauthorizedResponse. Authentication required (status code 401)
     *         or You do not have enough rights to perform this operation (status code 403)
     *         or Resource not found (status code 404)
     *         or Client error (status code 4XX)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update product's details",
        description = "Use this endpoint to update the product's details",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product Details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            }),
            @ApiResponse(responseCode = "401", description = "UnauthorizedResponse. Authentication required", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "You do not have enough rights to perform this operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "4XX", description = "Client error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "default", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuthClientCredentials", scopes={ "products" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Product> updateProduct(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Product", description = "Product Details") @Valid @RequestBody(required = false) Product product
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 4.99, \"name\" : \"Coffee\", \"description\" : \"Arabica coffee beans\", \"lastUpdatedOn\" : \"2023-01-01T10:10:10Z\", \"id\" : \"1001\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
